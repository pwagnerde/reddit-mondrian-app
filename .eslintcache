[{"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\index.js":"1","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\rootStore.js":"2","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\Navbar.js":"3","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\PostsList.js":"4","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\SinglePostPage.js":"5","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\TimeAgo.js":"6","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\constants\\base.js":"7","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\posts\\redditSlice.js":"8","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\posts\\subRedditSlice.js":"9","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\api\\reddit.js":"10","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Subreddits\\Subreddits.jsx":"11","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\App.js":"12","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Home\\Home.jsx":"13","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Post\\Post.jsx":"14","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\utils\\shortenNumber.js":"15","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Comment\\Comment.jsx":"16","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Header\\Header.jsx":"17","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Teaser\\Teaser.jsx":"18","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Navigation\\Navigation.jsx":"19","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Footer\\Footer.js":"20"},{"size":377,"mtime":1611934120812,"results":"21","hashOfConfig":"22"},{"size":311,"mtime":1611874403568,"results":"23","hashOfConfig":"22"},{"size":382,"mtime":1611879037654,"results":"24","hashOfConfig":"22"},{"size":1783,"mtime":1611863082680,"results":"25","hashOfConfig":"22"},{"size":893,"mtime":1611863082685,"results":"26","hashOfConfig":"22"},{"size":396,"mtime":1611863082686,"results":"27","hashOfConfig":"22"},{"size":1527,"mtime":1611968307139,"results":"28","hashOfConfig":"22"},{"size":3565,"mtime":1611881698570,"results":"29","hashOfConfig":"22"},{"size":808,"mtime":1611876343348,"results":"30","hashOfConfig":"22"},{"size":708,"mtime":1611880865331,"results":"31","hashOfConfig":"22"},{"size":1042,"mtime":1611929689922,"results":"32","hashOfConfig":"22"},{"size":672,"mtime":1612019307091,"results":"33","hashOfConfig":"22"},{"size":1957,"mtime":1612019227931,"results":"34","hashOfConfig":"22"},{"size":2041,"mtime":1611882025724,"results":"35","hashOfConfig":"22"},{"size":539,"mtime":1611876130830,"results":"36","hashOfConfig":"22"},{"size":480,"mtime":1611880008805,"results":"37","hashOfConfig":"22"},{"size":1622,"mtime":1612005452420,"results":"38","hashOfConfig":"22"},{"size":633,"mtime":1611967310872,"results":"39","hashOfConfig":"22"},{"size":1022,"mtime":1612004210530,"results":"40","hashOfConfig":"22"},{"size":522,"mtime":1612019483713,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ylchfp",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\index.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\rootStore.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\Navbar.js",[],["86","87"],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\PostsList.js",["88"],"import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\nimport {\r\n  selectAllPosts,\r\n  fetchPosts,\r\n  selectPostIds,\r\n  selectPostById,\r\n} from '../../stores/posts/postsSlice'\r\n\r\nlet PostExcerpt = ({ postId }) => {\r\n  const post = useSelector((state) => selectPostById(state, postId))\r\n\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <div>\r\n        <PostAuthor userId={post.user} />\r\n        <TimeAgo timestamp={post.date} />\r\n      </div>\r\n      <ReactionButtons post={post} />\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport const PostsList = () => {\r\n  const dispatch = useDispatch()\r\n  const orderedPostIds = useSelector(selectPostIds)\r\n\r\n  const postStatus = useSelector((state) => state.posts.status)\r\n  const error = useSelector((state) => state.posts.error)\r\n\r\n  useEffect(() => {\r\n    if (postStatus === 'idle') {\r\n      dispatch(fetchPosts())\r\n    }\r\n  }, [postStatus, dispatch])\r\n\r\n  let content\r\n\r\n  if (postStatus === 'loading') {\r\n    content = <div className=\"loader\">Loading...</div>\r\n  } else if (postStatus === 'succeeded') {\r\n    content = orderedPostIds.map((postId) => (\r\n      <PostExcerpt key={postId} postId={postId} />\r\n    ))\r\n  } else if (postStatus === 'error') {\r\n    content = <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {content}\r\n    </section>\r\n  )\r\n}\r\n","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\SinglePostPage.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\components\\TimeAgo.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\constants\\base.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\posts\\redditSlice.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\posts\\subRedditSlice.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\stores\\api\\reddit.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Subreddits\\Subreddits.jsx",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\App.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Home\\Home.jsx",["89","90"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Post from '../Post/Post';\nimport Teaser from '../Teaser/Teaser'\nimport {\n  fetchPosts,\n  selectFilteredPosts,\n  setSearchTerm,\n  fetchComments,\n} from '../../stores/posts/redditSlice';\nimport './Home.css';\n\nconst Home = () => {\n  const reddit = useSelector((state) => state.reddit);\n  const { isLoading, error, searchTerm, selectedSubreddit } = reddit;\n  const posts = useSelector(selectFilteredPosts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPosts(selectedSubreddit));\n  }, [selectedSubreddit]);\n\n  const onToggleComments = (index) => {\n    const getComments = (permalink) => {\n      dispatch(fetchComments(index, permalink));\n    };\n\n    return getComments;\n  };\n\n  if (isLoading) {\n    return (\n      <p>Loading...</p>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error\">\n        <h2>Failed to load posts.</h2>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(fetchPosts(selectedSubreddit))}\n        >\n          Try again\n        </button>\n      </div>\n    );\n  }\n\n  if (posts.length === 0) {\n    return (\n      <div className=\"error\">\n        <h2>No posts matching \"{searchTerm}\"</h2>\n        <button type=\"button\" onClick={() => dispatch(setSearchTerm(''))}>\n          Go home\n        </button>\n      </div>\n    );\n  }\n\n/*  return (\n    <>\n      {posts.map((post, index) => (  \n        <Post\n          key={post.id}\n          post={post}\n          onToggleComments={onToggleComments(index)}\n      />\n      ))}\n    </>\n  );\n*/\n\n    return (\n      <>\n        <div className=\"mondrianFlex\">\n          {posts.map((post, index) => (\n            <Teaser\n              key={post.id}\n              post={post}\n              index={index}\n              onToggleComments={onToggleComments(index)}\n            />\n          ))}\n        </div>\n      </>\n    )\n};\n\nexport default Home;\n","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Post\\Post.jsx",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\utils\\shortenNumber.js",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Comment\\Comment.jsx",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Header\\Header.jsx",["91"],"import React, { useState, useEffect } from 'react'\nimport './Header.css'\nimport Navigation from '../Navigation/Navigation'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  setSearchTerm,\n  selectSelectedSubreddit,\n} from '../../stores/posts/redditSlice'\n\nconst Header = () => {\n  const [searchTermLocal, setSearchTermLocal] = useState('')\n  const searchTerm = useSelector((state) => state.reddit.searchTerm)\n  const dispatch = useDispatch()\n\n    const selectedSubreddit = useSelector(selectSelectedSubreddit)\n\n  const onSearchTermChange = (e) => {\n    setSearchTermLocal(e.target.value)\n  }\n\n  useEffect(() => {\n    setSearchTermLocal(searchTerm)\n  }, [searchTerm])\n\n  const onSearchTermSubmit = (e) => {\n    e.preventDefault()\n    dispatch(setSearchTerm(searchTermLocal))\n  }\n\n  return (\n    <React.Fragment>\n      <header>\n        <div className=\"logo\">\n          <img className=\"logo-icon\" src=\"./logo.jpg\" alt=\"logo\" />\n          <div className=\"logo-title\">\n            Reddit<span>Mondrian</span>\n          </div>\n        </div>\n        <Navigation />\n        <form className=\"search\" onSubmit={onSearchTermSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            value={searchTermLocal}\n            onChange={onSearchTermChange}\n            aria-label=\"Search posts\"\n          />\n          <button\n            type=\"submit\"\n            onClick={onSearchTermSubmit}\n            aria-label=\"Search\"\n          >\n            <img src=\"./search.svg\" alt=\"Go\" />\n          </button>\n        </form>\n      </header>\n    </React.Fragment>\n  )\n}\n\nexport default Header\n","D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Teaser\\Teaser.jsx",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Navigation\\Navigation.jsx",[],"D:\\OneDrive\\09 Zorin\\portfolio-projects\\reddit-mondrian-app\\src\\views\\Footer\\Footer.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":9,"column":3,"nodeType":"98","messageId":"99","endLine":9,"endColumn":17},{"ruleId":"96","severity":1,"message":"100","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":12},{"ruleId":"101","severity":1,"message":"102","line":21,"column":6,"nodeType":"103","endLine":21,"endColumn":25,"suggestions":"104"},{"ruleId":"96","severity":1,"message":"105","line":15,"column":11,"nodeType":"98","messageId":"99","endLine":15,"endColumn":28},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'selectAllPosts' is defined but never used.","Identifier","unusedVar","'Post' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'selectedSubreddit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [dispatch, selectedSubreddit]",{"range":"111","text":"112"},[613,632],"[dispatch, selectedSubreddit]"]